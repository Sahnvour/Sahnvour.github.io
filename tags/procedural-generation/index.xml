<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Procedural-Generation on Antoine Vugliano </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://sahnvour.github.io/tags/procedural-generation/index.xml/</link>
    <language>en-us</language>
    <author>Antoine Vugliano</author>
    
    <updated>Wed, 03 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Skeletons</title>
      <link>http://sahnvour.github.io/projects/skeletons/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/skeletons/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Skeletons&lt;/strong&gt; is a procedural generator of animalish skeletons.&lt;/p&gt;

&lt;p&gt;During my year at &lt;a href=&#34;/tags/Gamagora&#34;&gt;Gamagora&lt;/a&gt;, I attended a short course on procedural generation. As a final project, I wrote this generator with two friends.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Objectives&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Content&lt;/h2&gt;

&lt;p&gt;I thought, probably influenced by the game &lt;em&gt;Spore&lt;/em&gt;, that generating creatures would be interesting; and it&amp;rsquo;s quite different from the sempiternal terrains.&lt;/p&gt;

&lt;p&gt;Generating a complete creature with bones, organs, tissues would require an incredible amount of work though, so we limited ourselves to skeletons. This is afterall what gives its structure to a body, and we can use our imagination to build the rest. Doing so also has the advantage that we could easily translate it to 3D animation skeletons afterwards.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;Procedural generation is a pretty &lt;em&gt;cool&lt;/em&gt; subject in computer science, and lots of programmers enjoy doing things that work, but that are comprehensible only to other programmers.&lt;/p&gt;

&lt;p&gt;In the video games world, procedural generation is used to produce large quantities of various content, but it is easy to forget that somebody has to do a quality check on the generated content. This person is most probably a non-tech, like an artist or level designer. The other goal of creating a procedural generator is therefore to make it usable by other people, who do not necessarily understand how it works.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Technical side&lt;/h1&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Engine&lt;/h2&gt;

&lt;p&gt;The engine for this generator is a &lt;a href=&#34;https://en.wikipedia.org/wiki/L-system&#34;&gt;L-system&lt;/a&gt; library we wrote during course, and improved for this project.&lt;/p&gt;

&lt;p&gt;Our skeletons are defined by a grammar, consisting of rules that describe how bones are produced. Given a starting point; the &lt;em&gt;axiom&lt;/em&gt;, the engine will process the rules to expand our axiom into a list of &lt;em&gt;symbols&lt;/em&gt; to which we give meaning: these will be our bones.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Sample grammar&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Trunk → Head Spine Tail
Spine → HighSpine LowSpine
HighSpine → Vertebra [Arm] Vertebra HighSpine
HighSpine → ε
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These rules are translated into Python code, but in the current state they do not provide enough information to produce interesting skeletons. That&amp;rsquo;s why we introduced parameters into our rules, to have more complex emerging behaviors.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;UI&lt;/h2&gt;

&lt;p&gt;The symbols are then processed by a set of &lt;em&gt;drawing commands&lt;/em&gt;: they abstract the way to represent symbols. It could be anything like printing their names to the console, or sending meshes to a 3D printer.&lt;/p&gt;

&lt;p&gt;We wanted to have visual and real-time feedback for the user, so having a 3D view of our skeletons inside the project was the goal. This way, we could also put parameters as widgets inside the UI and let the user play with the generator at its full extent.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;/img/skeletons-01.png&#34; alt=&#34;screenshot&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SHMµP</title>
      <link>http://sahnvour.github.io/projects/shmup/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/shmup/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;SHMµP&lt;/strong&gt; is a little game I work on during my spare time. I felt like it reached the point where I can show it, so here we go. It is by no means finished, but more like a demo at the current state; yet it is totally playable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/shmup-01.png&#34; alt=&#34;screenshot&#34; /&gt;

&lt;img src=&#34;http://i.imgur.com/ZhXGJkz.png&#34; alt=&#34;color blocks image&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;What is this game about ?&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Minimalism&lt;/h2&gt;

&lt;p&gt;Going for graphic minimalism is certainly an easy way to avoid doing art. My art skills being non-existent, it allowed me to have a very small amount of assets (basically a single 64*8 texture) in the game, and to give it a coherent look and feel.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;block&lt;/strong&gt; is the elementary unit in the game. The player&amp;rsquo;s ship, enemies, bullets, everything is composed of blocks.&lt;/p&gt;

&lt;p&gt;Blocks are important for the gameplay, of course. They are what you will use to build your ship, making it unique. Each block has a particular effect on your ship, and so the do on enemies!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgflip.com/f00j2.jpg&#34; alt=&#34;blocks everywhere&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Yet no mining, no crafting.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Procedural content&lt;/h2&gt;

&lt;p&gt;I am lazy, so this game includes 0 stages.
The good news is, no stage means infinite stage: the enemies are generated on the fly, by a clever algorithm (soon™).
As time passes, the difficulty increases. By beating enemies, getting bonus and avoiding getting hit, the player increases his skill-o-meter. Waves will then adapt the way they generate enemies based on these 2 parameters, among others.&lt;/p&gt;

&lt;p&gt;The game relies heavily on random, but every run can be replayed: you just need to enter the same seed once again.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Scripting&lt;/h2&gt;

&lt;p&gt;Enemies are scripts.&lt;/p&gt;

&lt;p&gt;Waves are scripts.&lt;/p&gt;

&lt;p&gt;Scripts are simple &lt;em&gt;lua&lt;/em&gt; files one can drop in the scripts folder and they will just work. They use a very simple &lt;em&gt;API&lt;/em&gt;, making it easy for anybody with basic programming knowledge to write one.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Sample enemy script&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;BLOCKS = {
    blocks.None,    blocks.None,    blocks.None,    blocks.None,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.None,    blocks.None,    blocks.None,    blocks.None
}

local onScreen = false
local start

function init(enemy)
    enemy:setMaxLife(1)
    enemy:setLife(1)
end

function update(enemy)
    if not onScreen then
        start = game.time
        onScreen = true
    end
    local duration = game.time:since(start):asSeconds()
    enemy:setSpeedY(math.cos(2*duration)*60)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;External links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://sahnvour.github.io/SHMµP/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Sahnvour/shmup-scripting&#34;&gt;Scripting documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>