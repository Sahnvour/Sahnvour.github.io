<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>C on Antoine Vugliano </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://sahnvour.github.io/tags/c/index.xml/</link>
    <language>en-us</language>
    <author>Antoine Vugliano</author>
    
    <updated>Sat, 10 Jan 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Collimateru</title>
      <link>http://sahnvour.github.io/projects/collimateru/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/collimateru/</guid>
      <description>&lt;p&gt;This project is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Path_tracing&#34;&gt;path tracer&lt;/a&gt; running on CPU, for educational purpose.&lt;/p&gt;

&lt;p&gt;Development is on-going, it currently features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Illumination&lt;/li&gt;
&lt;li&gt;Point and sphere lights&lt;/li&gt;
&lt;li&gt;Diffuse, specular, refractive materials&lt;/li&gt;
&lt;li&gt;Complex materials combination&lt;/li&gt;
&lt;li&gt;Textured objects with normal mapping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/collimateru-01.png&#34; alt=&#34;image&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dalicious</title>
      <link>http://sahnvour.github.io/projects/dalicious/</link>
      <pubDate>Wed, 19 Nov 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/dalicious/</guid>
      <description>&lt;p&gt;In november 2014, I registered for the &lt;a href=&#34;http://www.montpellieringame.com/index.php/events/game-challenge/&#34;&gt;Game Challenge&lt;/a&gt;, taking place during the Montpellier In Game summit.&lt;/p&gt;

&lt;p&gt;Teams of around 10 students were formed with developers, graphists, game designers and sound artists. Each group had to draw five random constraints for their game. We picked the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a camera as input for the game&lt;/li&gt;
&lt;li&gt;Use a 2D axis input for something else than moving a camera or an object in-game&lt;/li&gt;
&lt;li&gt;Have a cooking mechanic as core gameplay&lt;/li&gt;
&lt;li&gt;Take inspiration from Dali&amp;rsquo;s work for the game art&lt;/li&gt;
&lt;li&gt;Have a dynamic soundtrack&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Not an easy task.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We still managed to have a working prototype at the end of the three days.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SHMµP</title>
      <link>http://sahnvour.github.io/projects/shmup/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/shmup/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;SHMµP&lt;/strong&gt; is a little game I work on during my spare time. I felt like it reached the point where I can show it, so here we go. It is by no means finished, but more like a demo at the current state; yet it is totally playable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/shmup-01.png&#34; alt=&#34;screenshot&#34; /&gt;

&lt;img src=&#34;http://i.imgur.com/ZhXGJkz.png&#34; alt=&#34;color blocks image&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;What is this game about ?&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Minimalism&lt;/h2&gt;

&lt;p&gt;Going for graphic minimalism is certainly an easy way to avoid doing art. My art skills being non-existent, it allowed me to have a very small amount of assets (basically a single 64*8 texture) in the game, and to give it a coherent look and feel.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;block&lt;/strong&gt; is the elementary unit in the game. The player&amp;rsquo;s ship, enemies, bullets, everything is composed of blocks.&lt;/p&gt;

&lt;p&gt;Blocks are important for the gameplay, of course. They are what you will use to build your ship, making it unique. Each block has a particular effect on your ship, and so the do on enemies!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgflip.com/f00j2.jpg&#34; alt=&#34;blocks everywhere&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Yet no mining, no crafting.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Procedural content&lt;/h2&gt;

&lt;p&gt;I am lazy, so this game includes 0 stages.
The good news is, no stage means infinite stage: the enemies are generated on the fly, by a clever algorithm (soon™).
As time passes, the difficulty increases. By beating enemies, getting bonus and avoiding getting hit, the player increases his skill-o-meter. Waves will then adapt the way they generate enemies based on these 2 parameters, among others.&lt;/p&gt;

&lt;p&gt;The game relies heavily on random, but every run can be replayed: you just need to enter the same seed once again.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Scripting&lt;/h2&gt;

&lt;p&gt;Enemies are scripts.&lt;/p&gt;

&lt;p&gt;Waves are scripts.&lt;/p&gt;

&lt;p&gt;Scripts are simple &lt;em&gt;lua&lt;/em&gt; files one can drop in the scripts folder and they will just work. They use a very simple &lt;em&gt;API&lt;/em&gt;, making it easy for anybody with basic programming knowledge to write one.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Sample enemy script&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;BLOCKS = {
    blocks.None,    blocks.None,    blocks.None,    blocks.None,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.Blue,    blocks.Blue,    blocks.Blue,    blocks.None,
    blocks.None,    blocks.None,    blocks.None,    blocks.None,    blocks.None
}

local onScreen = false
local start

function init(enemy)
    enemy:setMaxLife(1)
    enemy:setLife(1)
end

function update(enemy)
    if not onScreen then
        start = game.time
        onScreen = true
    end
    local duration = game.time:since(start):asSeconds()
    enemy:setSpeedY(math.cos(2*duration)*60)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;External links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://sahnvour.github.io/SHMµP/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Sahnvour/shmup-scripting&#34;&gt;Scripting documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Lego Mindstorm</title>
      <link>http://sahnvour.github.io/projects/holidayz/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/holidayz/</guid>
      <description>

&lt;p&gt;As an optional project using &lt;em&gt;innovative technologies&lt;/em&gt;, we (a group of 7 students) created a robot with the following objectives:
- grab and store small plastic balls
- differentiate blue and red balls
- find its way in an environment with obstacles&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;The robot was built with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Lego_Mindstorms_EV3&#34;&gt;Mindstorm&lt;/a&gt; brick to control the different motors (wheels, arms).
We put a smartphone on it, filming the ground just in front of it to detect balls and move accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/holidayz-01.png&#34; alt=&#34;robot&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The play field was filmed by 4 cameras with different view angles, streaming their videos on the local network. A computer ran our server program that constructed a single view of the field from the cameras, and identified balls and obstacles before sending them to the robot. It also analysed video streamed from the smartphone to detect near-by balls. The software on the Lego brick was then able to compute its moves to catch the balls and find its way to an arbitrary point using the info from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/holidayz-02.png&#34; alt=&#34;robot&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>