<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>University on Antoine Vugliano </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://sahnvour.github.io/categories/university/index.xml/</link>
    <language>en-us</language>
    <author>Antoine Vugliano</author>
    
    <updated>Fri, 10 Apr 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Feline Good</title>
      <link>http://sahnvour.github.io/projects/feline%20good/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/feline%20good/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://felinegoodgame.com/&#34;&gt;Feline Good&lt;/a&gt; is my final year study project at &lt;a href=&#34;http://gamagora.univ-lyon2.fr/&#34;&gt;Gamagora&lt;/a&gt; 2014-15.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/logo.png&#34; alt=&#34;Feline Good Logo&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Context&lt;/h1&gt;

&lt;p&gt;Gamagora offers three different formations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Game &amp;amp; Level Design&lt;/li&gt;
&lt;li&gt;3D Infography&lt;/li&gt;
&lt;li&gt;Programmation &amp;amp; Development, a one and final year of a Master&amp;rsquo;s degree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After 4 months of courses, all the students are to gather in groups of about 13 students to make a full game in 3 months. This happens from January to April.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/rembrandt.png&#34; alt=&#34;Rembrandt image&#34; /&gt;
&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Feline Good&lt;/h1&gt;

&lt;p&gt;Feline Good is a 3D Sidescroller where you play &lt;strong&gt;Rembrandt&lt;/strong&gt;, a proud stray cat in the New Orleans of the 1920&amp;rsquo;s. I invite you to visit the official website for a more complete description of the project (altough in french) and a downloadable build.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Organization in the project&lt;/h2&gt;

&lt;p&gt;Our team was composed of 13 people from Gamagora:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 programmers&lt;/li&gt;
&lt;li&gt;4 artists&lt;/li&gt;
&lt;li&gt;6 game designers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the very start, we organized ourselves with many personnal second roles such as leads, project manager, community manager, product owner etc. I was myself the lead programmer on the project.&lt;/p&gt;

&lt;p&gt;This helped us a lot to distribute tasks efficiently and to have a good coordination during the project. On top of that, we used an adapted Scrum method with short sprints of one week.&lt;/p&gt;

&lt;p&gt;In the end, that is in my oppinion the most valuable point of the formation. We all learned to work as a team, and not a tiny one. We had to learn and understand how other jobs work and think to create a great game on top of a good communication.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Unreal Engine 4&lt;/h2&gt;

&lt;p&gt;At the start of the project, we had a hard time choosing between two of the best engines at our disposal: &lt;strong&gt;Unity&lt;/strong&gt; and &lt;strong&gt;Unreal Engine 4&lt;/strong&gt;. We, programmers, had already worked with Unity more or less, so that it was the safe choice. But UE4 is certainly going to be a first class actor of the videogames industry in the very short future, is using C++ for programming, and has a lot of cool features: it was the choice of heart.&lt;/p&gt;

&lt;p&gt;What tipped the balance in favour of UE4 is its &lt;strong&gt;Blueprint&lt;/strong&gt; system. It&amp;rsquo;s a very tightly integrated node programming system that allow users to prototype very quickly and even to make complete games without a single line of code. In our case, we liked this because it could be a great help for level designers and programmers. And it was.&lt;/p&gt;

&lt;p&gt;Building our project with an engine we had to learn at the same time was not easy, and that was maybe the greatest challenge we had. But we successfully overcame the difficulties.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skeletons</title>
      <link>http://sahnvour.github.io/projects/skeletons/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/skeletons/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Skeletons&lt;/strong&gt; is a procedural generator of animalish skeletons.&lt;/p&gt;

&lt;p&gt;During my year at &lt;a href=&#34;/tags/Gamagora&#34;&gt;Gamagora&lt;/a&gt;, I attended a short course on procedural generation. As a final project, I wrote this generator with two friends.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Objectives&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Content&lt;/h2&gt;

&lt;p&gt;I thought, probably influenced by the game &lt;em&gt;Spore&lt;/em&gt;, that generating creatures would be interesting; and it&amp;rsquo;s quite different from the sempiternal terrains.&lt;/p&gt;

&lt;p&gt;Generating a complete creature with bones, organs, tissues would require an incredible amount of work though, so we limited ourselves to skeletons. This is afterall what gives its structure to a body, and we can use our imagination to build the rest. Doing so also has the advantage that we could easily translate it to 3D animation skeletons afterwards.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Accessibility&lt;/h2&gt;

&lt;p&gt;Procedural generation is a pretty &lt;em&gt;cool&lt;/em&gt; subject in computer science, and lots of programmers enjoy doing things that work, but that are comprehensible only to other programmers.&lt;/p&gt;

&lt;p&gt;In the video games world, procedural generation is used to produce large quantities of various content, but it is easy to forget that somebody has to do a quality check on the generated content. This person is most probably a non-tech, like an artist or level designer. The other goal of creating a procedural generator is therefore to make it usable by other people, who do not necessarily understand how it works.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Technical side&lt;/h1&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Engine&lt;/h2&gt;

&lt;p&gt;The engine for this generator is a &lt;a href=&#34;https://en.wikipedia.org/wiki/L-system&#34;&gt;L-system&lt;/a&gt; library we wrote during course, and improved for this project.&lt;/p&gt;

&lt;p&gt;Our skeletons are defined by a grammar, consisting of rules that describe how bones are produced. Given a starting point; the &lt;em&gt;axiom&lt;/em&gt;, the engine will process the rules to expand our axiom into a list of &lt;em&gt;symbols&lt;/em&gt; to which we give meaning: these will be our bones.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Sample grammar&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Trunk → Head Spine Tail
Spine → HighSpine LowSpine
HighSpine → Vertebra [Arm] Vertebra HighSpine
HighSpine → ε
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These rules are translated into Python code, but in the current state they do not provide enough information to produce interesting skeletons. That&amp;rsquo;s why we introduced parameters into our rules, to have more complex emerging behaviors.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;UI&lt;/h2&gt;

&lt;p&gt;The symbols are then processed by a set of &lt;em&gt;drawing commands&lt;/em&gt;: they abstract the way to represent symbols. It could be anything like printing their names to the console, or sending meshes to a 3D printer.&lt;/p&gt;

&lt;p&gt;We wanted to have visual and real-time feedback for the user, so having a 3D view of our skeletons inside the project was the goal. This way, we could also put parameters as widgets inside the UI and let the user play with the generator at its full extent.&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;/img/skeletons-01.png&#34; alt=&#34;screenshot&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lego Mindstorm</title>
      <link>http://sahnvour.github.io/projects/holidayz/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 UTC</pubDate>
      <author>Antoine Vugliano</author>
      <guid>http://sahnvour.github.io/projects/holidayz/</guid>
      <description>

&lt;p&gt;As an optional project using &lt;em&gt;innovative technologies&lt;/em&gt;, we (a group of 7 students) created a robot with the following objectives:
- grab and store small plastic balls
- differentiate blue and red balls
- find its way in an environment with obstacles&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Setup&lt;/h1&gt;

&lt;p&gt;The robot was built with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Lego_Mindstorms_EV3&#34;&gt;Mindstorm&lt;/a&gt; brick to control the different motors (wheels, arms).
We put a smartphone on it, filming the ground just in front of it to detect balls and move accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/holidayz-01.png&#34; alt=&#34;robot&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The play field was filmed by 4 cameras with different view angles, streaming their videos on the local network. A computer ran our server program that constructed a single view of the field from the cameras, and identified balls and obstacles before sending them to the robot. It also analysed video streamed from the smartphone to detect near-by balls. The software on the Lego brick was then able to compute its moves to catch the balls and find its way to an arbitrary point using the info from the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/holidayz-02.png&#34; alt=&#34;robot&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>